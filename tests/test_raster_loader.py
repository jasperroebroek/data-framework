import shutil
from pathlib import Path
from typing import List, Optional

import numpy as np
import pytest
import rasterio as rio
import xarray as xr
from affine import Affine
from pyproj import CRS

from data_framework.data_entry import RasterDataEntry
from data_framework.raster_loader import RasterLoaderSingle, RasterLoaderMultiple
from data_framework.xarray import load_flat_file


@pytest.fixture(autouse=True)
def run_around_tests():
    yield
    shutil.rmtree("data_reprojected", ignore_errors=True)


class WTDLoader(RasterLoaderSingle):
    data_entry: RasterDataEntry = RasterDataEntry(
        name='wtd',
        path=Path('data/wtd.tif')
    )


class WTDLoaderMultiple(RasterLoaderMultiple):
    data_entries: List[RasterDataEntry] = [
        RasterDataEntry(
            name='wtd',
            path=Path('data/wtd.tif')
        )
    ]

    def load(self, crs: Optional[CRS] = None, transform: Optional[Affine] = None) -> xr.DataArray:
        crs, transform = self.parse_crs_transform(crs, transform)

        for entry in self.data_entries:
            if not entry.is_reprojected(crs, transform):
                entry.reproject(crs, transform)

        for path in self.get_reprojected_paths(crs, transform):
            return load_flat_file(path, name='wtd')


@pytest.fixture
def wtd_loader():
    return WTDLoader()


@pytest.fixture
def wtd_loader_multiple():
    return WTDLoaderMultiple()


def test_get_crs_transform(wtd_loader):
    crs, transform = wtd_loader.get_crs_transform()
    assert crs == CRS.from_epsg(4326)
    assert transform == Affine(0.008333333532777779, 0.0, 109.999999342,
                               0.0, -0.008333333112499999, -8.999999499)


def test_is_generated(wtd_loader):
    assert wtd_loader.is_generated() == True  # Assuming not generated by default


def test_is_reprojected(wtd_loader):
    assert wtd_loader.is_reprojected() == False  # Assuming not reprojected by default


def test_load(wtd_loader):
    da = wtd_loader.load()
    assert isinstance(da, xr.DataArray)
    assert da.shape == (4320, 5400)
    assert da.rio.crs == CRS.from_epsg(4326)
    assert da.dtype == np.float64

    path = Path("data_reprojected/EPSG_4326/affine_0.0083_0.0000_110.0000_0.0000_-0.0083_-9.0000/WTD/wtd.tif")
    assert path.is_symlink()


def test_get_path(wtd_loader):
    path = wtd_loader.get_path()
    assert path.exists()  # Assuming the path exists


def test_get_reprojected_paths(wtd_loader):
    crs = CRS.from_epsg(3857)  # Assuming a different CRS
    transform = Affine.scale(0.1, 0.1)  # Assuming a different transform
    with pytest.raises(OSError):
        wtd_loader.get_reprojected_path(crs, transform)

    da = wtd_loader.load()
    path = wtd_loader.get_reprojected_path()
    assert path == Path("data_reprojected/EPSG_4326/affine_0.0083_0.0000_110.0000_0.0000_-0.0083_-9.0000/WTD/wtd.tif")


def test_generate(wtd_loader):
    with pytest.raises(NotImplementedError):
        wtd_loader.generate()


def test_reproject(wtd_loader):
    crs = CRS.from_authority('ESRI', '54012')
    transform = Affine(727.6126874754426, 0.0, 9069805.061072081,
                       0.0, -727.6126874754426, -1183448.9422314009)
    wtd_loader.reproject(crs, transform)

    path = wtd_loader.get_reprojected_path(crs, transform)
    assert not path.is_symlink()
    assert path.exists()

    fp = rio.open(path)
    fp.close()
    assert fp.crs.to_string() == crs.to_string()
    assert Affine.almost_equals(fp.transform, transform)


def test_load_multiple(wtd_loader_multiple):
    da = wtd_loader_multiple.load()
    assert isinstance(da, xr.DataArray)
    assert da.shape == (4320, 5400)
    assert da.rio.crs == CRS.from_epsg(4326)
    assert da.dtype == np.float64

    path = Path("data_reprojected/EPSG_4326/affine_0.0083_0.0000_110.0000_0.0000_-0.0083_-9.0000/WTDMultiple/wtd.tif")
    assert path.is_symlink()
